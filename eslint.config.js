import tsEslintPlugin from "@typescript-eslint/eslint-plugin";
import jsdocPlugin from "eslint-plugin-jsdoc";
import tsEslintParser from "@typescript-eslint/parser";

/** @type {import("eslint").ESLint.ConfigData} */
export default {
	plugins: {
		["eslint-plugin-jsdoc"]: jsdocPlugin,
		["@typescript-eslint"]: tsEslintPlugin,
	},
	languageOptions: {
		parser: tsEslintParser,
		parserOptions: {
			project: "tsconfig.json",
			sourceType: "module",
		},
	},
	files: ["src/**/*.ts", "./prettier.config.js", "./eslint.config.js"],
	...tsEslintPlugin.configs.strictTypeChecked,
	...tsEslintPlugin.configs.stylisticTypeChecked,
	rules: {
		"@typescript-eslint/adjacent-overload-signatures": "error",
		"@typescript-eslint/array-type": "off",
		"@typescript-eslint/ban-types": "off",
		"@typescript-eslint/consistent-type-assertions": "off",
		"@typescript-eslint/consistent-type-definitions": "off",
		"@typescript-eslint/dot-notation": "error",
		"@typescript-eslint/explicit-function-return-type": "off",
		"@typescript-eslint/explicit-member-accessibility": [
			"error",
			{
				accessibility: "no-public",
			},
		],
		"@typescript-eslint/explicit-module-boundary-types": "off",
		"@typescript-eslint/indent": ["off", "tab"],
		"@typescript-eslint/member-ordering": "off",
		"@typescript-eslint/naming-convention": [
			"off",
			{
				selector: "variable",
				format: ["camelCase", "UPPER_CASE", "PascalCase"],
				leadingUnderscore: "allow",
				trailingUnderscore: "forbid",
			},
		],
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-empty-interface": "off",
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-namespace": "error",
		"@typescript-eslint/no-parameter-properties": "off",
		"@typescript-eslint/no-shadow": [
			"off",
			{
				hoist: "all",
			},
		],
		"@typescript-eslint/no-unused-expressions": "error",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/no-var-requires": "error",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-namespace-keyword": "error",
		"@typescript-eslint/triple-slash-reference": [
			"error",
			{
				path: "always",
				types: "prefer-import",
				lib: "always",
			},
		],
		"@typescript-eslint/typedef": "off",
		"@typescript-eslint/unified-signatures": "error",
		"@typescript-eslint/no-namespace": "off",
		"@typescript-eslint/no-base-to-string": "off",
		"@typescript-eslint/restrict-template-expressions": "off",
		"@typescript-eslint/no-unsafe-member-access": "off",
		"@typescript-eslint/no-unused-vars": [
			"error",
			{
				varsIgnorePattern: "^_",
				argsIgnorePattern: "^_",
			},
		],
		"arrow-parens": ["off", "always"],
		"comma-dangle": "off",
		complexity: "off",
		"constructor-super": "error",
		curly: ["error", "all"],
		"dot-notation": "off",
		eqeqeq: ["off", "always"],
		"guard-for-in": "off",
		"id-denylist": [
			"error",
			"any",
			"Number",
			"number",
			"String",
			"string",
			"Boolean",
			"boolean",
			"Undefined",
			"undefined",
		],
		"id-match": "error",
		indent: "off",
		"eslint-plugin-jsdoc/check-alignment": "error",
		"eslint-plugin-jsdoc/check-indentation": "off",
		"max-classes-per-file": "off",
		"no-bitwise": "error",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-console": "off",
		"no-debugger": "error",
		"no-empty": "off",
		"no-empty-function": "off",
		"no-eval": "error",
		"no-fallthrough": "off",
		"no-invalid-this": "off",
		"no-multiple-empty-lines": "off",
		"no-new-wrappers": "error",
		"no-shadow": "off",
		"no-throw-literal": "error",
		"no-trailing-spaces": "off",
		"no-undef-init": "error",
		"no-underscore-dangle": "off",
		"no-unsafe-finally": "error",
		"no-unused-expressions": "off",
		"no-unused-labels": "error",
		"no-use-before-define": "off",
		"no-var": "error",
		"object-shorthand": "off",
		"one-var": ["off", "never"],
		"prefer-arrow/prefer-arrow-functions": "off",
		"prefer-const": [
			"error",
			{
				destructuring: "all",
			},
		],
		quotes: "off",
		radix: "error",
		"spaced-comment": [
			"error",
			"always",
			{
				markers: ["/"],
			},
		],
		"use-isnan": "error",
		"valid-typeof": "off",
	},
};
